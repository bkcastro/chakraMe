    <div class="grid h-screen w-screen grid-cols-3 overflow-hidden">
      <div class="relative col-span-2 h-full w-full bg-red-200" id="container">
        <div
          class="absolute right-0 bottom-0 z-10 mb-10 flex w-full justify-center"
        >
          <button
            id="arButton"
            class="rouned-md z-20 border-2 border-l-0 p-2 hover:bg-orange-500"
          >
            AR
          </button>
          <button
            id="arButton"
            class="rouned-md z-20 border-2 border-r-0 p-2 hover:bg-teal-300"
          >
            VR
          </button>
        </div>
      </div>
      <div class="max-h-full max-w-full overflow-auto rounded-md bg-slate-100">
        <div class="gird max-w-[400px] grid-rows-3 p-3">
          <div class="mb-3 rounded-md border-b-2 border-t-2 px-3 py-2">
            <h1 class="mb-3 text-lg">Aura</h1>
            <label class="block text-sm font-medium text-gray-700"
              >Color:</label
            >
            <input type="color" class="m-auto h-4 w-40" /> <br />
            <div>
              <label class="block text-sm font-medium text-gray-700"
                >Size:</label
              >
              <input
                type="range"
                min="0"
                max="100"
                value="50"
                class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
              />
            </div>
            <label class="text-sm font-medium text-gray-700">Visable:</label>
            <input type="checkbox" />
          </div>
          <div class="mb-3 rounded-md border-b-2 border-t-2 px-3 py-2">
            <h1 class="mb-3 text-lg">Energy</h1>
            <label class="block text-sm font-medium text-gray-700"
              >Color:</label
            >
            <input type="color" class="m-auto h-4 w-40" /> <br />
            <label class="block text-sm font-medium text-gray-700">Size:</label>
            <input
              type="range"
              min="0"
              max="100"
              value="25"
              class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
            />
            <br />
            <label class="text-sm font-medium text-gray-700">Visable:</label>
            <input type="checkbox" />
          </div>
          <div class="mb-3 rounded-md border-b-2 border-t-2 px-3 py-2">
            <h1 class="mb-3 text-lg">Particles</h1>
            <label class="text-sm font-medium text-gray-700"
              >Render as lines:</label
            >
            <input type="checkbox" /> <br />
            <label class="block text-sm font-medium text-gray-700"
              >Count:</label
            >
            <input
              type="range"
              min="0"
              max="400"
              value="0"
              class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
            />
            <br />
            <label class="block text-sm font-medium text-gray-700"
              >Speed:</label
            >
            <input
              type="range"
              min="0"
              max="100"
              value="50"
              class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
            />
            <br />
            <label class="block text-sm font-medium text-gray-700">Size:</label>
            <input
              type="range"
              min="0"
              max="50"
              value="1"
              class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
            />
            <br />
            <label class="block text-sm font-medium text-gray-700"
              >Radius:</label
            >
            <input
              type="range"
              min="0"
              max="100"
              value="20"
              class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
            />
            <br />
            <label class="block text-sm font-medium text-gray-700"
              >Inner Color:</label
            >
            <input type="color" class="m-auto h-4 w-40" /> <br />
            <label class="block text-sm font-medium text-gray-700"
              >Outer Color:</label
            >
            <input type="color" class="m-auto h-4 w-40" />
            <br />
            <label class="text-sm font-medium text-gray-700">Visable:</label>
            <input type="checkbox" />
          </div>
          <div class="mb-3 rounded-md border-b-2 border-t-2 px-3 py-2">
            <h1 class="text-lg">Object</h1>
            <div class="p-2">
              <h2>Rotation Speed:</h2>
              <label class="text-sm font-medium text-gray-700">X:</label>
              <input
                type="range"
                min="0"
                max="200"
                value="1"
                class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
              />
              <br />
              <label class="text-sm font-medium text-gray-700">Y:</label>
              <input
                type="range"
                min="0"
                max="200"
                value="1"
                class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
              />
              <br />
              <label class="text-sm font-medium text-gray-700">Z:</label>
              <input
                type="range"
                min="0"
                max="200"
                value="1"
                class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"
              />
              <br />
            </div>
          </div>
        </div>
      </div>
    </div>



inputsFields.forEach((input, i) => {
  input.id = i;
  input.onchange = action(i);

  switch (input.id) {
    case "0":
      input.value =
        "#" + rasengan.outerAuraMaterial.uniforms.uColor.value.getHexString();
      break;
    case "1":
      input.value = rasengan.outerAura.scale.x * 50;
      break;
    case "2":
      input.checked = true;
      break;
    case "3":
      //input.value =
      //  "#" + rasengan.innerAuraMaterial.uniforms.uColor.value.getHexString();
      break;
    case "4":
      input.value = rasengan.innerAura.scale.x * 50;
      break;
    case "5":
      input.checked = true;
      break;
    case "6":
      input.checked = true;
      break;
    case "7":
      input.value = rasengan.particleCount;
      break;
    case "8":
      input.value = rasengan.particleSpeed * 50;
      break;
    case "9":
      input.value = rasengan.particleMaterial.uniforms.uSize.value;
      break;
    case "10":
      input.value = rasengan.particleRadius * 50;
      break;
    case "11":
      input.value =
        "#" +
        rasengan.particleMaterial.uniforms.innerColor.value.getHexString();
      break;
    case "12":
      input.value =
        "#" +
        rasengan.particleMaterial.uniforms.outerColor.value.getHexString();
      break;
    case "13":
      input.value = rasengan.particles.visible;
      break;
    case "14":
      input.value = rasengan.rotationSpeed.x * 50;
      break;
    case "15":
      input.value = rasengan.rotationSpeed.y * 50;
      break;
    case "16":
      input.value = rasengan.rotationSpeed.z * 50;
      break;
  }
});

function action(id) {
  const actions = {
    0: (event) =>
      (rasengan.outerAuraMaterial.uniforms.uColor.value = new THREE.Color(
        event.target.value
      )),
    1: (event) =>
      rasengan.outerAura.scale.set(
        event.target.value / 50,
        event.target.value / 50,
        event.target.value / 50
      ),
    2: (event) => (rasengan.outerAura.visible = !rasengan.outerAura.visible),
    3: (event) =>
      (rasengan.innerAuraMaterial.uniforms.uColor.value = new THREE.Color(
        event.target.value
      )),
    4: (event) =>
      rasengan.innerAura.scale.set(
        event.target.value / 50,
        event.target.value / 50,
        event.target.value / 50
      ),
    5: (event) => (rasengan.innerAura.visible = !rasengan.innerAura.visible),
    6: (event) => {
      rasengan.renderAsParticles = !rasengan.renderAsParticles;
      rasengan.createParticles();
    },
    7: (event) => {
      rasengan.particleCount = event.target.value;
      rasengan.createParticles();
    },
    8: (event) => {
      rasengan.particleSpeed = event.target.value / 50;
      rasengan.createParticles();
    },
    9: (event) =>
      (rasengan.particleMaterial.uniforms.uSize.value = event.target.value / 2),
    10: (event) => {
      rasengan.particleRadius = event.target.value / 50;
      rasengan.createParticles();
    },
    11: (event) =>
      (rasengan.particleMaterial.uniforms.innerColor.value = new THREE.Color(
        event.target.value
      )),
    12: (event) =>
      (rasengan.particleMaterial.uniforms.outerColor.value = new THREE.Color(
        event.target.value
      )),
    13: (event) => (rasengan.particles.visible = !rasengan.particles.visible),
    14: (event) => (rasengan.rotationSpeed.x = event.target.value / 50),
    15: (event) => (rasengan.rotationSpeed.y = event.target.value / 50),
    16: (event) => (rasengan.rotationSpeed.z = event.target.value / 50),
  };

  return actions[id];
}

